import React, { useMemo } from 'react';
import {
  Card, CardContent, Typography, Box,
  Alert, List, ListItem, ListItemIcon, ListItemText, Divider,
  Accordion, AccordionSummary, AccordionDetails, Chip
} from '@mui/material';
import { 
  Cloud, WbSunny, AcUnit, Thunderstorm, 
  Agriculture, CheckCircle, Schedule, ExpandMore
} from '@mui/icons-material';

const WeatherBasedRecommendationCard = ({ weatherData, forecastData, city }) => {
  const recommendations = useMemo(() => {
    if (!weatherData) {
      return {
        immediate: [],
        upcoming: [],
        alerts: [],
        workWindow: '–î–∞–Ω—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ',
        priority: 'low'
      };
    }

    const temp = weatherData.temperature;
    const humidity = weatherData.humidity;
    const windSpeed = weatherData.windSpeed;
    
    let immediate = [];
    let upcoming = [];
    let alerts = [];
    let workWindow = '–°–ø—Ä–∏—è—Ç–ª–∏–≤—ñ —É–º–æ–≤–∏ –¥–ª—è —Ä–æ–±—ñ—Ç';
    let priority = 'low';

    if (temp < 0) {
      alerts.push('–ó–∞–º–æ—Ä–æ–∑–∫–∏! –†–∏–∑–∏–∫ –ø–æ—à–∫–æ–¥–∂–µ–Ω–Ω—è —Ä–æ—Å–ª–∏–Ω');
      immediate.push('–ó–∞—Å—Ç–æ—Å—É–π—Ç–µ –∑–∞—Ö–∏—Å–Ω—ñ –∑–∞—Ö–æ–¥–∏ –≤—ñ–¥ –∑–∞–º–æ—Ä–æ–∑–∫—ñ–≤');
      workWindow = '–û–±–º–µ–∂–µ–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –¥–ª—è –ø–æ–ª—å–æ–≤–∏—Ö —Ä–æ–±—ñ—Ç';
      priority = 'high';
    } else if (temp > 32) {
      alerts.push('–°–ø–µ–∫–∞! –£–Ω–∏–∫–∞–π—Ç–µ —Ä–æ–±—ñ—Ç —É –¥–µ–Ω–Ω–∏–π —á–∞—Å');
      immediate.push('–†–æ–±–æ—Ç–∏ —Ç—ñ–ª—å–∫–∏ –≤—Ä–∞–Ω—Ü—ñ (–¥–æ 9:00) —Ç–∞ –≤–≤–µ—á–µ—Ä—ñ (–ø—ñ—Å–ª—è 18:00)');
      workWindow = '–†–æ–±–æ—Ç–∏ —Ç—ñ–ª—å–∫–∏ –≤—Ä–∞–Ω—Ü—ñ —Ç–∞ –≤–≤–µ—á–µ—Ä—ñ';
      priority = 'medium';
    } else if (temp > 25) {
      immediate.push('–û–ø—Ç–∏–º–∞–ª—å–Ω—ñ —É–º–æ–≤–∏ –¥–ª—è –ø–æ–ª—å–æ–≤–∏—Ö —Ä–æ–±—ñ—Ç');
      upcoming.push('–ú–æ–Ω—ñ—Ç–æ—Ä—å—Ç–µ —Ä–æ—Å–ª–∏–Ω–∏ –Ω–∞ –æ–∑–Ω–∞–∫–∏ —Ç–µ–ø–ª–æ–≤–æ–≥–æ —Å—Ç—Ä–µ—Å—É');
    }

    if (humidity > 85) {
      alerts.push('–í–∏—Å–æ–∫–∏–π —Ä–∏–∑–∏–∫ –≥—Ä–∏–±–∫–æ–≤–∏—Ö –∑–∞—Ö–≤–æ—Ä—é–≤–∞–Ω—å');
      immediate.push('–ó–∞—Å—Ç–æ—Å—É–π—Ç–µ –ø—Ä–æ—Ñ—ñ–ª–∞–∫—Ç–∏—á–Ω—ñ —Ñ—É–Ω–≥—ñ—Ü–∏–¥–∏');
      immediate.push('–í—ñ–¥–∫–ª–∞–¥—ñ—Ç—å –ø–æ–ª–∏–≤ –¥–æ –∑–Ω–∏–∂–µ–Ω–Ω—è –≤–æ–ª–æ–≥–æ—Å—Ç—ñ');
      priority = Math.max(priority, 'medium');
    } else if (humidity < 40) {
      immediate.push('–ù–∏–∑—å–∫–∞ –≤–æ–ª–æ–≥—ñ—Å—Ç—å - –∑–±—ñ–ª—å—à—ñ—Ç—å –ø–æ–ª–∏–≤');
      upcoming.push('–ó–∞—Å—Ç–æ—Å—É–π—Ç–µ –º—É–ª—å—á—É–≤–∞–Ω–Ω—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–æ–ª–æ–≥–∏');
    }

    if (windSpeed > 15) {
      alerts.push('–°–∏–ª—å–Ω–∏–π –≤—ñ—Ç–µ—Ä! –ü—Ä–∏–ø–∏–Ω—ñ—Ç—å –ø–æ–ª—å–æ–≤—ñ —Ä–æ–±–æ—Ç–∏');
      immediate.push('–ó—É–ø–∏–Ω—ñ—Ç—å –æ–±–ø—Ä–∏—Å–∫—É–≤–∞–Ω–Ω—è —Ç–∞ —Ç–æ—á–Ω—ñ —Ä–æ–±–æ—Ç–∏');
      workWindow = '–ù–µ–±–µ–∑–ø–µ—á–Ω–æ –¥–ª—è –ø–æ–ª—å–æ–≤–∏—Ö —Ä–æ–±—ñ—Ç';
      priority = 'high';
    } else if (windSpeed > 10) {
      immediate.push('–°–∏–ª—å–Ω–∏–π –≤—ñ—Ç–µ—Ä - —É–Ω–∏–∫–∞–π—Ç–µ –æ–±–ø—Ä–∏—Å–∫—É–≤–∞–Ω–Ω—è');
      upcoming.push('–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–¥–≤\'—è–∑—É–≤–∞–Ω–Ω—è —Ä–æ—Å–ª–∏–Ω');
    } else if (windSpeed < 3) {
      immediate.push('–®—Ç–∏–ª—å - —ñ–¥–µ–∞–ª—å–Ω—ñ —É–º–æ–≤–∏ –¥–ª—è –æ–±–ø—Ä–∏—Å–∫—É–≤–∞–Ω–Ω—è');
    }

    if (forecastData && forecastData.length > 0) {
      const todayRain = forecastData[0]?.precipProbability || 0;
      const tomorrowRain = forecastData[1]?.precipProbability || 0;

      if (todayRain > 70) {
        alerts.push('–°—å–æ–≥–æ–¥–Ω—ñ –æ—á—ñ–∫—É—î—Ç—å—Å—è –¥–æ—â');
        immediate.push('–ó–∞–≤–µ—Ä—à—ñ—Ç—å —Ç–µ—Ä–º—ñ–Ω–æ–≤–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ä–æ–±–æ—Ç–∏');
        workWindow = '–û–±–º–µ–∂–µ–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ —á–µ—Ä–µ–∑ –¥–æ—â';
      } else if (tomorrowRain > 70) {
        immediate.push('–ó–∞–≤—Ç—Ä–∞ –æ—á—ñ–∫—É—î—Ç—å—Å—è –¥–æ—â - –∑–∞–≤–µ—Ä—à—ñ—Ç—å —Ä–æ–±–æ—Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ');
        upcoming.push('–ü—ñ–¥–≥–æ—Ç—É–π—Ç–µ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è –¥–ª—è —Ä–æ–±–æ—Ç–∏ –ø—ñ—Å–ª—è –¥–æ—â—É');
      }

      const weekRain = forecastData.filter(day => (day.precipProbability || 0) > 40).length;
      if (weekRain >= 4) {
        upcoming.push('–î–æ—â–æ–≤–∏–π —Ç–∏–∂–¥–µ–Ω—å - –ø—ñ–¥–≥–æ—Ç—É–π—Ç–µ –¥—Ä–µ–Ω–∞–∂–Ω—ñ —Å–∏—Å—Ç–µ–º–∏');
      } else if (weekRain === 0) {
        upcoming.push('–°—É—Ö–∞ –ø–æ–≥–æ–¥–∞ - –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å–∏—Å—Ç–µ–º–∏ –ø–æ–ª–∏–≤—É');
      }
    }

    const month = new Date().getMonth() + 1;
    if (month >= 3 && month <= 5) { 
      if (temp > 5 && temp < 25) {
        upcoming.push('–°–ø—Ä–∏—è—Ç–ª–∏–≤—ñ —É–º–æ–≤–∏ –¥–ª—è –≤–µ—Å–Ω—è–Ω–∏—Ö –ø–æ—Å—ñ–≤—ñ–≤');
      }
    } else if (month >= 6 && month <= 8) { 
      if (temp > 25) {
        immediate.push('–ó–∞–±–µ–∑–ø–µ—á—Ç–µ –ø–æ–ª–∏–≤ —É –ø—Ä–æ—Ö–æ–ª–æ–¥–Ω—ñ –≥–æ–¥–∏–Ω–∏');
      }
      upcoming.push('–ö–æ–Ω—Ç—Ä–æ–ª—é–π—Ç–µ –≤–æ–ª–æ–≥—ñ—Å—Ç—å —Ç–∞ —Å—Ç–∞–Ω —Ä–æ—Å–ª–∏–Ω');
    } else if (month >= 9 && month <= 11) { 
      upcoming.push('–ß–∞—Å –∑–±–æ—Ä—É –≤—Ä–æ–∂–∞—é —Ç–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–æ –∑–∏–º–∏');
    } else { 
      upcoming.push('–ß–∞—Å –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è —Ç–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–æ–≥–æ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è');
    }

    if (immediate.length === 0) {
      immediate.push('–°–ø—Ä–∏—è—Ç–ª–∏–≤—ñ —É–º–æ–≤–∏ –¥–ª—è –ø–ª–∞–Ω–æ–≤–∏—Ö —Ä–æ–±—ñ—Ç');
    }

    return {
      immediate,
      upcoming,
      alerts,
      workWindow,
      priority
    };
  }, [weatherData, forecastData]);

  const getWeatherIcon = (temp, condition) => {
    if (temp < 0) return <AcUnit sx={{ color: '#2196f3' }} />;
    if (temp > 30) return <WbSunny sx={{ color: '#ff9800' }} />;
    if (condition?.includes('–¥–æ—â')) return <Thunderstorm sx={{ color: '#607d8b' }} />;
    return <Cloud sx={{ color: '#9e9e9e' }} />;
  };

  const getPriorityColor = (priority) => {
    switch (priority) {
      case 'high': return 'error';
      case 'medium': return 'warning';
      default: return 'success';
    }
  };

  return (
    <Card sx={{ height: '100%' }}>
      <CardContent sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>
        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 1 }}>
          <Typography variant="h6" sx={{ fontWeight: 'bold', display: 'flex', alignItems: 'center' }}>
            {getWeatherIcon(weatherData?.temperature, weatherData?.description)}
            <Box sx={{ ml: 1 }}>–ü–æ–≥–æ–¥–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó</Box>
          </Typography>
          <Chip 
            label={recommendations.priority === 'high' ? '–í–∏—Å–æ–∫–∏–π' : 
                  recommendations.priority === 'medium' ? '–°–µ—Ä–µ–¥–Ω—ñ–π' : '–ù–∏–∑—å–∫–∏–π'}
            color={getPriorityColor(recommendations.priority)}
            size="small"
          />
        </Box>

        {/* –†–æ–±–æ—á–µ –≤—ñ–∫–Ω–æ */}
        <Box sx={{ 
          p: 1.5, 
          borderRadius: 1, 
          bgcolor: recommendations.priority === 'high' ? 'error.light' : 
                   recommendations.priority === 'medium' ? 'warning.light' : 'success.light',
          mb: 2
        }}>
          <Typography variant="subtitle2" sx={{ 
            fontWeight: 'bold',
            color: recommendations.priority === 'high' ? 'error.dark' : 
                   recommendations.priority === 'medium' ? 'warning.dark' : 'success.dark'
          }}>
            üïê {recommendations.workWindow}
          </Typography>
        </Box>

        {/* –ê–ª–µ—Ä—Ç–∏ */}
        {recommendations.alerts.length > 0 && (
          <Alert severity="warning" sx={{ mb: 1 }}>
            <Typography variant="body2">
              {recommendations.alerts.slice(0, 2).join('. ')}
              {recommendations.alerts.length > 2 && ` (+${recommendations.alerts.length - 2})`}
            </Typography>
          </Alert>
        )}
       
        {/* –ù–µ–≥–∞–π–Ω—ñ –¥—ñ—ó */}
        <Box sx={{ mb: 1.5 }}>
          <Typography variant="subtitle2" sx={{ fontWeight: 'bold', mb: 1, display: 'flex', alignItems: 'center' }}>
            <CheckCircle sx={{ mr: 0.5, fontSize: 16, color: 'success.main' }} />
            –ó–∞—Ä–∞–∑ ({recommendations.immediate.length}):
          </Typography>
          <List dense>
            {recommendations.immediate.slice(0, 3).map((rec, index) => (
              <ListItem key={index} sx={{ py: 0.25 }}>
                <ListItemIcon sx={{ minWidth: 24 }}>
                  <Agriculture sx={{ fontSize: 14, color: 'primary.main' }} />
                </ListItemIcon>
                <ListItemText 
                  primary={rec}
                  primaryTypographyProps={{ variant: 'body2' }}
                />
              </ListItem>
            ))}
          </List>
        </Box>

        <Divider sx={{ my: 1 }} />

        {/* –ù–∞–π–±–ª–∏–∂—á—ñ –¥—ñ—ó */}
        <Box sx={{ mb: 1.5 }}>
          <Typography variant="subtitle2" sx={{ fontWeight: 'bold', mb: 1, display: 'flex', alignItems: 'center' }}>
            <Schedule sx={{ mr: 0.5, fontSize: 16, color: 'info.main' }} />
            –ù–∞–π–±–ª–∏–∂—á—ñ –¥–Ω—ñ ({recommendations.upcoming.length}):
          </Typography>
          <List dense>
            {recommendations.upcoming.slice(0, 2).map((rec, index) => (
              <ListItem key={index} sx={{ py: 0.25 }}>
                <ListItemIcon sx={{ minWidth: 24 }}>
                  <Agriculture sx={{ fontSize: 14, color: 'info.main' }} />
                </ListItemIcon>
                <ListItemText 
                  primary={rec}
                  primaryTypographyProps={{ variant: 'body2' }}
                />
              </ListItem>
            ))}
          </List>
        </Box>

        {/* –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó */}
        {(recommendations.immediate.length > 3 || recommendations.upcoming.length > 2) && (
          <Accordion sx={{ mt: 'auto' }}>
            <AccordionSummary expandIcon={<ExpandMore />}>
              <Typography variant="body2" sx={{ fontWeight: 'medium' }}>
                –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
              </Typography>
            </AccordionSummary>
            <AccordionDetails>
              {recommendations.immediate.length > 3 && (
                <Box sx={{ mb: 1 }}>
                  <Typography variant="subtitle2" sx={{ fontWeight: 'bold', mb: 0.5 }}>
                    –î–æ–¥–∞—Ç–∫–æ–≤—ñ –Ω–µ–≥–∞–π–Ω—ñ –¥—ñ—ó:
                  </Typography>
                  <List dense>
                    {recommendations.immediate.slice(3).map((rec, index) => (
                      <ListItem key={index} sx={{ py: 0.25 }}>
                        <ListItemIcon sx={{ minWidth: 24 }}>
                          <Agriculture sx={{ fontSize: 14, color: 'primary.main' }} />
                        </ListItemIcon>
                        <ListItemText 
                          primary={rec}
                          primaryTypographyProps={{ variant: 'body2' }}
                        />
                      </ListItem>
                    ))}
                  </List>
                </Box>
              )}

              {recommendations.upcoming.length > 2 && (
                <Box>
                  <Typography variant="subtitle2" sx={{ fontWeight: 'bold', mb: 0.5 }}>
                    –î–æ–¥–∞—Ç–∫–æ–≤—ñ –º–∞–π–±—É—Ç–Ω—ñ –¥—ñ—ó:
                  </Typography>
                  <List dense>
                    {recommendations.upcoming.slice(2).map((rec, index) => (
                      <ListItem key={index} sx={{ py: 0.25 }}>
                        <ListItemIcon sx={{ minWidth: 24 }}>
                          <Agriculture sx={{ fontSize: 14, color: 'info.main' }} />
                        </ListItemIcon>
                        <ListItemText 
                          primary={rec}
                          primaryTypographyProps={{ variant: 'body2' }}
                        />
                      </ListItem>
                    ))}
                  </List>
                </Box>
              )}
            </AccordionDetails>
          </Accordion>
        )}       
      </CardContent>
    </Card>
  );
};

export default WeatherBasedRecommendationCard;