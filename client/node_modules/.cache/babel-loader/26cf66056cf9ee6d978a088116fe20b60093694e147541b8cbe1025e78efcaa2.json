{"ast":null,"code":"var _jsxFileName = \"D:\\\\3KNU\\\\kursova\\\\weather-agriculture-app\\\\client\\\\src\\\\pages\\\\WeatherAnalysis.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Container, Grid, Paper, Typography, TextField, Button, Box, CircularProgress } from '@mui/material';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'r echarts';\nimport WeatherMiniCard from '../WeatherMiniCard'; // Імпортуємо компонент\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction WeatherAnalysis() {\n  _s();\n  const [city, setCity] = useState('');\n  const [originalCityName, setOriginalCityName] = useState('');\n  const [currentWeather, setCurrentWeather] = useState(null);\n  const [forecast, setForecast] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const fetchWeatherData = async () => {\n    if (!city) return;\n    setOriginalCityName(city);\n    setLoading(true);\n    setError('');\n    try {\n      const weatherResponse = await fetch(`http://localhost:5000/api/weather/current/${city}`);\n      if (!weatherResponse.ok) {\n        const errorData = await weatherResponse.json();\n        throw new Error(errorData.error || 'Помилка отримання даних про погоду');\n      }\n      const weatherData = await weatherResponse.json();\n      const forecastResponse = await fetch(`http://localhost:5000/api/weather/forecast/${city}`);\n      if (!forecastResponse.ok) {\n        const errorData = await forecastResponse.json();\n        throw new Error(errorData.error || 'Помилка отримання прогнозу погоди');\n      }\n      const forecastData = await forecastResponse.json();\n      const modifiedWeatherData = {\n        ...weatherData,\n        originalCityName: originalCityName\n      };\n      setCurrentWeather(modifiedWeatherData);\n      setForecast(forecastData);\n    } catch (err) {\n      console.error('Помилка:', err);\n      setError(err.message || 'Помилка отримання даних погоди');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Функція для визначення стану погоди\n  const getWeatherCondition = description => {\n    const sunnyConditions = ['clear', 'sunny', 'sun'];\n    const cloudyConditions = ['cloudy', 'cloud', 'overcast'];\n    const lowerDescription = description.toLowerCase();\n    if (sunnyConditions.some(condition => lowerDescription.includes(condition))) {\n      return 'sunny';\n    }\n    if (cloudyConditions.some(condition => lowerDescription.includes(condition))) {\n      return 'cloudy';\n    }\n    return 'cloudy'; // За замовчуванням\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"lg\",\n    sx: {\n      mt: 4,\n      mb: 4\n    },\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          sx: {\n            p: 2,\n            display: 'flex',\n            gap: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            label: \"\\u0412\\u0432\\u0435\\u0434\\u0456\\u0442\\u044C \\u043C\\u0456\\u0441\\u0442\\u043E\",\n            value: city,\n            onChange: e => setCity(e.target.value),\n            fullWidth: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            onClick: fetchWeatherData,\n            disabled: loading,\n            children: loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n              size: 24\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 26\n            }, this) : 'Отримати погоду'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          sx: {\n            p: 2,\n            bgcolor: 'error.light'\n          },\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            color: \"error\",\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this), currentWeather && /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        container: true,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(Paper, {\n            sx: {\n              p: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              gutterBottom: true,\n              children: [\"\\u041F\\u043E\\u0442\\u043E\\u0447\\u043D\\u0430 \\u043F\\u043E\\u0433\\u043E\\u0434\\u0430 \\u0432 \", originalCityName]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                alignItems: 'center',\n                mb: 2\n              },\n              children: [currentWeather.icon && /*#__PURE__*/_jsxDEV(\"img\", {\n                src: currentWeather.icon,\n                alt: currentWeather.description,\n                style: {\n                  marginRight: '10px'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h5\",\n                children: [currentWeather.temperature, \"\\xB0C\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: [\"\\u041E\\u043F\\u0438\\u0441: \", currentWeather.description]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: [\"\\u0412\\u043E\\u043B\\u043E\\u0433\\u0456\\u0441\\u0442\\u044C: \", currentWeather.humidity, \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: [\"\\u0428\\u0432\\u0438\\u0434\\u043A\\u0456\\u0441\\u0442\\u044C \\u0432\\u0456\\u0442\\u0440\\u0443: \", currentWeather.windSpeed, \" \\u043A\\u043C/\\u0433\\u043E\\u0434\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 17\n            }, this), currentWeather.city !== originalCityName && /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"caption\",\n              color: \"text.secondary\",\n              children: currentWeather.city\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(WeatherMiniCard, {\n            date: new Date().toLocaleDateString('uk-UA', {\n              weekday: 'long',\n              day: 'numeric',\n              month: 'long'\n            }),\n            minTemp: currentWeather.temperature - 3 // Приблизна мінімальна температура\n            ,\n            maxTemp: currentWeather.temperature + 3 // Приблизна максимальна температура\n            ,\n            condition: getWeatherCondition(currentWeather.description)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this), forecast.length > 0 && /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        container: true,\n        spacing: 2,\n        children: forecast.slice(0, 5).map((dailyForecast, index) => /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 4,\n          md: 2.4,\n          children: /*#__PURE__*/_jsxDEV(WeatherMiniCard, {\n            date: new Date(dailyForecast.date).toLocaleDateString('uk-UA', {\n              weekday: 'long',\n              day: 'numeric'\n            }),\n            minTemp: Math.round(dailyForecast.temperature - 3),\n            maxTemp: Math.round(dailyForecast.temperature + 3),\n            condition: getWeatherCondition(dailyForecast.description || 'cloudy')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }, this), forecast.length > 0 && /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          sx: {\n            p: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            gutterBottom: true,\n            children: [\"\\u041F\\u0440\\u043E\\u0433\\u043D\\u043E\\u0437 \\u043F\\u043E\\u0433\\u043E\\u0434\\u0438 \\u0434\\u043B\\u044F \", originalCityName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              width: '100%',\n              height: 300,\n              overflowX: 'auto'\n            },\n            children: /*#__PURE__*/_jsxDEV(LineChart, {\n              width: 800,\n              height: 300,\n              data: forecast,\n              margin: {\n                top: 5,\n                right: 30,\n                left: 20,\n                bottom: 5\n              },\n              children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n                strokeDasharray: \"3 3\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n                dataKey: \"date\",\n                tickFormatter: date => {\n                  if (date instanceof Date) {\n                    return date.toLocaleDateString();\n                  }\n                  return new Date(date).toLocaleDateString();\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 193,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 202,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                labelFormatter: date => {\n                  if (date instanceof Date) {\n                    return date.toLocaleDateString();\n                  }\n                  return new Date(date).toLocaleDateString();\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 203,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Line, {\n                type: \"monotone\",\n                dataKey: \"temperature\",\n                stroke: \"#8884d8\",\n                name: \"\\u0422\\u0435\\u043C\\u043F\\u0435\\u0440\\u0430\\u0442\\u0443\\u0440\\u0430\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 212,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Line, {\n                type: \"monotone\",\n                dataKey: \"humidity\",\n                stroke: \"#82ca9d\",\n                name: \"\\u0412\\u043E\\u043B\\u043E\\u0433\\u0456\\u0441\\u0442\\u044C\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 218,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n_s(WeatherAnalysis, \"8m/duIRKTvU04x+0IU0DpDPhznM=\");\n_c = WeatherAnalysis;\nexport default WeatherAnalysis;\nvar _c;\n$RefreshReg$(_c, \"WeatherAnalysis\");","map":{"version":3,"names":["React","useState","Container","Grid","Paper","Typography","TextField","Button","Box","CircularProgress","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","WeatherMiniCard","jsxDEV","_jsxDEV","WeatherAnalysis","_s","city","setCity","originalCityName","setOriginalCityName","currentWeather","setCurrentWeather","forecast","setForecast","loading","setLoading","error","setError","fetchWeatherData","weatherResponse","fetch","ok","errorData","json","Error","weatherData","forecastResponse","forecastData","modifiedWeatherData","err","console","message","getWeatherCondition","description","sunnyConditions","cloudyConditions","lowerDescription","toLowerCase","some","condition","includes","maxWidth","sx","mt","mb","children","container","spacing","item","xs","p","display","gap","label","value","onChange","e","target","fullWidth","fileName","_jsxFileName","lineNumber","columnNumber","variant","onClick","disabled","size","bgcolor","color","md","gutterBottom","alignItems","icon","src","alt","style","marginRight","temperature","humidity","windSpeed","date","Date","toLocaleDateString","weekday","day","month","minTemp","maxTemp","length","slice","map","dailyForecast","index","sm","Math","round","width","height","overflowX","data","margin","top","right","left","bottom","strokeDasharray","dataKey","tickFormatter","labelFormatter","type","stroke","name","_c","$RefreshReg$"],"sources":["D:/3KNU/kursova/weather-agriculture-app/client/src/pages/WeatherAnalysis.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { \r\n  Container, \r\n  Grid, \r\n  Paper, \r\n  Typography, \r\n  TextField,\r\n  Button,\r\n  Box,\r\n  CircularProgress\r\n} from '@mui/material';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'r echarts';\r\nimport WeatherMiniCard from '../WeatherMiniCard'; // Імпортуємо компонент\r\n\r\nfunction WeatherAnalysis() {\r\n  const [city, setCity] = useState('');\r\n  const [originalCityName, setOriginalCityName] = useState(''); \r\n  const [currentWeather, setCurrentWeather] = useState(null);\r\n  const [forecast, setForecast] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n\r\n  const fetchWeatherData = async () => {\r\n    if (!city) return;\r\n    \r\n    setOriginalCityName(city);\r\n    setLoading(true);\r\n    setError('');\r\n    \r\n    try {\r\n      const weatherResponse = await fetch(`http://localhost:5000/api/weather/current/${city}`);\r\n      \r\n      if (!weatherResponse.ok) {\r\n        const errorData = await weatherResponse.json();\r\n        throw new Error(errorData.error || 'Помилка отримання даних про погоду');\r\n      }\r\n      \r\n      const weatherData = await weatherResponse.json();\r\n      \r\n      const forecastResponse = await fetch(`http://localhost:5000/api/weather/forecast/${city}`);\r\n      \r\n      if (!forecastResponse.ok) {\r\n        const errorData = await forecastResponse.json();\r\n        throw new Error(errorData.error || 'Помилка отримання прогнозу погоди');\r\n      }\r\n      \r\n      const forecastData = await forecastResponse.json();\r\n      \r\n      const modifiedWeatherData = {\r\n        ...weatherData,\r\n        originalCityName: originalCityName \r\n      };\r\n      \r\n      setCurrentWeather(modifiedWeatherData);\r\n      setForecast(forecastData);\r\n    } catch (err) {\r\n      console.error('Помилка:', err);\r\n      setError(err.message || 'Помилка отримання даних погоди');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Функція для визначення стану погоди\r\n  const getWeatherCondition = (description) => {\r\n    const sunnyConditions = ['clear', 'sunny', 'sun'];\r\n    const cloudyConditions = ['cloudy', 'cloud', 'overcast'];\r\n    \r\n    const lowerDescription = description.toLowerCase();\r\n    \r\n    if (sunnyConditions.some(condition => lowerDescription.includes(condition))) {\r\n      return 'sunny';\r\n    }\r\n    \r\n    if (cloudyConditions.some(condition => lowerDescription.includes(condition))) {\r\n      return 'cloudy';\r\n    }\r\n    \r\n    return 'cloudy'; // За замовчуванням\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12}>\r\n          <Paper sx={{ p: 2, display: 'flex', gap: 2 }}>\r\n            <TextField\r\n              label=\"Введіть місто\"\r\n              value={city}\r\n              onChange={(e) => setCity(e.target.value)}\r\n              fullWidth\r\n            />\r\n            <Button \r\n              variant=\"contained\" \r\n              onClick={fetchWeatherData}\r\n              disabled={loading}\r\n            >\r\n              {loading ? <CircularProgress size={24} /> : 'Отримати погоду'}\r\n            </Button>\r\n          </Paper>\r\n        </Grid>\r\n\r\n        {error && (\r\n          <Grid item xs={12}>\r\n            <Paper sx={{ p: 2, bgcolor: 'error.light' }}>\r\n              <Typography color=\"error\">{error}</Typography>\r\n            </Paper>\r\n          </Grid>\r\n        )}\r\n\r\n        {currentWeather && (\r\n          <Grid item xs={12} container spacing={2}>\r\n            <Grid item xs={12} md={6}>\r\n              <Paper sx={{ p: 2 }}>\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                  Поточна погода в {originalCityName}\r\n                </Typography>\r\n                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r\n                  {currentWeather.icon && (\r\n                    <img \r\n                      src={currentWeather.icon} \r\n                      alt={currentWeather.description}\r\n                      style={{ marginRight: '10px' }}\r\n                    />\r\n                  )}\r\n                  <Typography variant=\"h5\">{currentWeather.temperature}°C</Typography>\r\n                </Box>\r\n                <Typography>Опис: {currentWeather.description}</Typography>\r\n                <Typography>Вологість: {currentWeather.humidity}%</Typography>\r\n                <Typography>Швидкість вітру: {currentWeather.windSpeed} км/год</Typography>\r\n                {currentWeather.city !== originalCityName && (\r\n                  <Typography variant=\"caption\" color=\"text.secondary\">\r\n                      {currentWeather.city}\r\n                  </Typography>\r\n                )}\r\n              </Paper>\r\n            </Grid>\r\n\r\n            {/* Додаємо WeatherMiniCard для поточної погоди */}\r\n            <Grid item xs={12} md={6}>\r\n              <WeatherMiniCard \r\n                date={new Date().toLocaleDateString('uk-UA', { \r\n                  weekday: 'long', \r\n                  day: 'numeric', \r\n                  month: 'long' \r\n                })}\r\n                minTemp={currentWeather.temperature - 3} // Приблизна мінімальна температура\r\n                maxTemp={currentWeather.temperature + 3} // Приблизна максимальна температура\r\n                condition={getWeatherCondition(currentWeather.description)}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        )}\r\n\r\n        {forecast.length > 0 && (\r\n          <Grid item xs={12} container spacing={2}>\r\n            {/* Прогноз погоди у вигляді міні-карток */}\r\n            {forecast.slice(0, 5).map((dailyForecast, index) => (\r\n              <Grid item key={index} xs={12} sm={4} md={2.4}>\r\n                <WeatherMiniCard \r\n                  date={new Date(dailyForecast.date).toLocaleDateString('uk-UA', { \r\n                    weekday: 'long', \r\n                    day: 'numeric' \r\n                  })}\r\n                  minTemp={Math.round(dailyForecast.temperature - 3)}\r\n                  maxTemp={Math.round(dailyForecast.temperature + 3)}\r\n                  condition={getWeatherCondition(dailyForecast.description || 'cloudy')}\r\n                />\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        )}\r\n\r\n        {forecast.length > 0 && (\r\n          <Grid item xs={12}>\r\n            <Paper sx={{ p: 2 }}>\r\n              <Typography variant=\"h6\" gutterBottom>\r\n                Прогноз погоди для {originalCityName}\r\n              </Typography>\r\n              <Box sx={{ width: '100%', height: 300, overflowX: 'auto' }}>\r\n                <LineChart\r\n                  width={800}\r\n                  height={300}\r\n                  data={forecast}\r\n                  margin={{\r\n                    top: 5,\r\n                    right: 30,\r\n                    left: 20,\r\n                    bottom: 5,\r\n                  }}\r\n                >\r\n                  <CartesianGrid strokeDasharray=\"3 3\" />\r\n                  <XAxis \r\n                    dataKey=\"date\" \r\n                    tickFormatter={(date) => {\r\n                      if (date instanceof Date) {\r\n                        return date.toLocaleDateString();\r\n                      }\r\n                      return new Date(date).toLocaleDateString();\r\n                    }}\r\n                  />\r\n                  <YAxis />\r\n                  <Tooltip \r\n                    labelFormatter={(date) => {\r\n                      if (date instanceof Date) {\r\n                        return date.toLocaleDateString();\r\n                      }\r\n                      return new Date(date).toLocaleDateString();\r\n                    }}\r\n                  />\r\n                  <Legend />\r\n                  <Line \r\n                    type=\"monotone\" \r\n                    dataKey=\"temperature\" \r\n                    stroke=\"#8884d8\" \r\n                    name=\"Температура\"\r\n                  />\r\n                  <Line \r\n                    type=\"monotone\" \r\n                    dataKey=\"humidity\" \r\n                    stroke=\"#82ca9d\" \r\n                    name=\"Вологість\"\r\n                  />\r\n                </LineChart>\r\n              </Box>\r\n            </Paper>\r\n          </Grid>\r\n        )}\r\n      </Grid>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default WeatherAnalysis;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}